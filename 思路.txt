
动态代理实现功能增强！

1、创建InvocationHandler接口实现类，在重写的invoke()方法中调用method.invoke(...)方法，
此操作相当于目标对象调用其相应方法，只不过这里是代理对象进行的调用。

2、在method.invoke(...)方法调用前后可以进行其他的功能设计，称为功能增强。

3、最后返回方法调用结果。

4、创建测试类，获取目标对象和InvocationHandler接口实现类对象，
使用Proxy.newProxyInstance(...)方法得到代理对象，最后进行方法的调用。


下面是测试类：
----------------------------------------------------------------------
@Test
    public void test01(){

        //目标对象
        SomeService target = new SomeServiceImpl();
        //InvocationHandler接口实现类
        InvocationHandler handler = new MyInvocationHandler(target);
        //动态代理方式获取代理对象
        SomeService proxy = (SomeService) Proxy.newProxyInstance(target.getClass().getClassLoader(),
                target.getClass().getInterfaces(), handler);

        //使用代理对象调用方法，实现功能增强
        proxy.doSome();
        // proxy.doOther();
    }