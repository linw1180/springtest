

JoinPoint参数，在前置通知，后置通知，环绕通知中都可以有，但只能处于参数第一位

测试前置通知：
@Before(value = "execution(修饰符列表 返回值类型 包名.类名.方法名(形参数据类型) 异常类型)")
无返回值，可以有固定参数JoinPoint，必须在第一位，可获取方法参数

测试后置通知：
@AfterReturning(value = "切入点表达式", returning = "res")
无返回值，有一个固定参数，建议是Object，参数名要求和上边一样都写res
PoinJoint可以有，但必须在第一个参数位置

测试环绕通知：
@Rround(value = "切入点表达式")
有返回值，固定是Object，有一个固定形参ProceedingJoinPoint ，继承了JoinPoint
此环绕通知等同于动态代理中继承InvocationHandler的接口实现类
可以在方法前后进行功能增强，可以改变输出结果，可以控制方法是否执行！

统一管理切入点表达式的注解@Pointcut，项目中多个切入点表达式是重复的，可复用，作统一管理。
@Pointcut用法：
自定义一个方法：如 private void mypc() {}
在其方法定义上方使用@Pointcut("切入点表达式")
这就定义完成，在其他需要使用此切入点表达式的地方直接用其定义的方法名即可，
如一个环绕通知中：@Around(value = "mypc()")

ps:使用aspectJ + spring 进行AOP（面向切面编程），写前置通知，后置通知，环绕通知时，
需要在pom.xml文件中加入aspectJ，spring和Junit依赖。
使用注解创建对象时需要在主配置文件中声明 “自动代理生成器” 的同时，还需要声明“组件扫描器”。
如果是用xml配置文件创建对象的话，就不需要声明组件扫描器了。